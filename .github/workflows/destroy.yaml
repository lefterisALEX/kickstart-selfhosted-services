# This is a basic workflow to help you get started with Actions
name: Destroy

# Controls when the action will run. Invokes the workflow on push events but only for the main branch
on:
  workflow_dispatch:

env:
  tf_version: '1.8.1'
  tg_version: '0.67.0'
  infra: infra
  container_host: container-host
  TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
  TF_VAR_aws_s3_bucket: ${{ vars.AWS_S3_BUCKET }}
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
jobs:
  # checks:
  #   runs-on: ubuntu-latest
  #   continue-on-error: true
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@main
  #
  # output:
  #   runs-on: ubuntu-latest
  #   needs: checks
  #   outputs:
  #     private_network_id: ${{ steps.extract_network_id.outputs.network_id }}
  #   environment: 'prod'
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@main
  #
  #     - name: configure aws credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/github-oidc
  #         role-session-name: GitHub_to_AWS_OIDC
  #         aws-region: ${{ vars.AWS_REGION }}
  #
  #     - name: output
  #       id: output
  #       uses: gruntwork-io/terragrunt-action@v2
  #       with:
  #         tf_version: ${{ env.tf_version }}
  #         tg_version: ${{ env.tg_version }}
  #         tg_dir: ${{ env.infra }}
  #         tg_command: "output -raw private_network_id"
  #
  #     - name: Store Network ID
  #       id: extract_network_id
  #       run: |
  #         # The output looks like Retrieved output from terragrunt.hcl%0A12345678
  #         # The grep will match 5 or more digits. This should output only the 12345678
  #         network_id=$(echo '${{ steps.output.outputs.tg_action_output }}' | grep -o '[0-9]\{5,\}')
  #         echo "Network ID is $network_id"
  #         echo "network_id=$network_id" >> $GITHUB_OUTPUT

  # create-runner:
  #   name: create runner
  #   needs: output
  #   runs-on: ubuntu-24.04
  #   outputs:
  #     label: "self-hosted" 
  #     server_id: ${{ steps.create-hcloud-runner.outputs.server_id }}
  #   steps:
  #
  #     - name: Check for active runners
  #       id: check-active-runners
  #       run: |
  #         response=$(curl -s -w "%{http_code}" -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
  #         https://api.github.com/repos/${{ github.repository }}/actions/runners)
  #         http_code=$(echo "$response" | tail -n1)
  #         body=$(echo "$response" | sed '$ d')
  #         if [ "$http_code" -ne 200 ]; then
  #           echo "Failed to fetch runners. HTTP status code: $http_code"
  #           exit 1
  #         fi
  #         RUNNERS_COUNT=$(echo "$body" | jq 'if .runners == null then 0 else .runners | map(select(.status == "online")) | length end')
  #         echo "RUNNERS_COUNT=$RUNNERS_COUNT" >> $GITHUB_ENV
  #
  #     - name: Print message for existing runner
  #       if: env.RUNNERS_COUNT != '0'
  #       run: echo "There is already an active runner. Skipping creation."
  #
  #     - name: Print message for existing server
  #       if: env.SERVERS_COUNT != '0'
  #       run: echo "There is already an existing Runner in Hetzner Cloud server. Skipping creation."
  #
  #     - name: Create runner
  #       id: create-hcloud-runner
  #       if: env.RUNNERS_COUNT == '0' 
  #       uses: Cyclenerd/hcloud-github-runner@v1
  #       with:
  #         mode: create
  #         github_token: ${{ secrets.GH_TOKEN }}
  #         hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
  #         server_type: cx22
  #         image: rocky-9 # Rocky Linux 9
  #         ssh_key: 19042273
  #         network: ${{ needs.deploy-infra.outputs.private_network_id }}
  #         pre_runner_script: |
  #           dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo
  #           dnf -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin
  #           systemctl --now enable docker

  destroy-containers-host:
    runs-on: ubuntu-24.04
    # needs: [ create-runner ]
    environment: 'prod'
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/github-oidc
          role-session-name: GitHub_to_AWS_OIDC
          aws-region: ${{ vars.AWS_REGION }}

      - name: Destroy Host
        uses: gruntwork-io/terragrunt-action@v2
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
          INFISICAL_CLIENT_ID: ${{ secrets.INFISICAL_CLIENT_ID }}
          INFISICAL_CLIENT_SECRET: ${{ secrets.INFISICAL_CLIENT_SECRET }}
          INFISICAL_PROJECT_ID: ${{ secrets.INFISICAL_PROJECT_ID }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BOX_USERNAME: ${{ secrets.BOX_USERNAME }}
          BOX_PASSWORD: ${{ secrets.BOX_PASSWORD }}
          ONEDRIVE_TOKEN: ${{ secrets.ONEDRIVE_TOKEN }}
          ONEDRIVE_DRIVE_ID: ${{ secrets.ONEDRIVE_DRIVE_ID }}
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.container_host }}
          tg_command: 'destroy'

  destroy-infra:
    runs-on: ubuntu-latest
    needs: [ destroy-containers-host ]
    environment: 'prod'
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/github-oidc
          role-session-name: GitHub_to_AWS_OIDC
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy
        id: deploy
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.infra }}
          tg_command: 'destroy'

